{"version":3,"sources":["src/Transaction.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const Promise = require (\"bluebird\");\nconst forEach = require(\"lodash.foreach\");\nconst forEachRight = require(\"lodash.foreachright\");\nconst isFunction = require(\"lodash.isfunction\");\n\n/**\n * A transaction item is effectively a step in the transaction process with a defined forward and backward movement\n * It can also be initialized with state.\n */\nclass TransactionItem {\n\t/**\n\t * Forward and reverse functions passed in return ES6 promises, and take a single state object by reference\n\t * @param forward\n\t * @param reverse\n\t * @param state\n\t */\n\tconstructor(forward, reverse, state) {\n\t\tif(!(isFunction(forward) && isFunction(reverse))) {\n\t\t\tthrow TypeError(\"Forward and reverse parameters must be functions that return ES6 compatible promises.\");\n\t\t}\n\t\tthis.completed = false;\n\t\tthis.state = state ? state : null;\n\t\t//this.state = state ? cloneDeep(state) : null;\n\t\tthis.forward = forward;\n\t\tthis.reverse = reverse;\n\t}\n\n\t/**\n\t * Executes the transaction\n\t * @param s - only passed in for serial transactions, this is ignored when running in parallel.\n\t */\n\texec(s) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(!this.completed) {\n\t\t\t\tthis.state = s ? s : this.state;\n\t\t\t\t//this.state = s ? cloneDeep(s) : this.state;\n\t\t\t\tthis.forward(this.state)\n\t\t\t\t\t.then((newState) => {\n\t\t\t\t\t\tthis.state = newState;\n\t\t\t\t\t\t//this.state = cloneDeep(newState);\n\t\t\t\t\t\tthis.completed = true;\n\t\t\t\t\t\tresolve(this.state);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(\"The transaction item failed to execute. \"+errorAsString(error));\n\t\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\treject(\"This is an executed transaction item and cannot be re-executed\");\n\t\t\t}\n\t\t})\n\t}\n\n\trollback() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(this.completed) {\n\t\t\t\tthis.reverse(this.state)\n\t\t\t\t\t.then(()=> {\n\t\t\t\t\t\tthis.completed = false;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(\"The transaction item failed to rollback. \"+errorAsString(error));\n\t\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n}\n\n/**\n * A transaction is a collection of transaction items that can be run serially or in parallel. Rollback operations always happen in parallel.\n */\nclass Transaction {\n\n\t/**\n\t * Pass in a transaction id which defaults to epoch, and a logger which defaults to console.\n\t * @param transactionId\n\t * @param logger\n\t */\n\tconstructor(transactionId, transactionItems, logger) {\n\t\tthis.transactionItems = (transactionItems && transactionItems.length) ? transactionItems : [];\n\t\tthis.transactionId = transactionId ? transactionId : new Date().getTime()/1000;\n\t\tthis.logger = logger ? logger : console;\n\t}\n\n\t/**\n\t * Adds a transaction item to the ordered list.\n\t * @param transactionItem\n\t */\n\tadd(transactionItem) {\n\t\tif(transactionItem instanceof TransactionItem) {\n\t\t\tthis.transactionItems.push(transactionItem);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(\"Supplied object is not a TransactionItem\");\n\t\t}\n\t}\n\n\t/**\n\t * Clears all transaction items from the transaction\n\t */\n\tclear() {\n\t\tthis.transactionItems = [];\n\t}\n\n\t/**\n\t * Rolls back all transactions in parallel.\n\t * @returns {Promise.<*>}\n\t */\n\trollbackAll() {\n\t\tlet promises = [];\n\t\tforEachRight(this.transactionItems, (item) => {\n\t\t\tif(item.completed) {\n\t\t\t\tpromises.push(item.rollback());\n\t\t\t}\n\t\t});\n\t\treturn Promise.all(promises);\n\t}\n\n\t_log(message) {\n\t\tthis.logger.log(this.transactionId+\": \"+message);\n\t}\n\n\t_error(message) {\n\t\tthis.logger.error(this.transactionId+\": \"+message);\n\t}\n\n\t/**\n\t * Runs all transaction items in parallel.\n\t */\n\trunParallel() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._log(\"Transaction executing.\");\n\t\t\tlet promises = [];\n\t\t\tforEach(this.transactionItems, (item) => {\n\t\t\t\tpromises.push(item.exec());\n\t\t\t});\n\t\t\tPromise.all(promises)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis._log(\"Transaction execution succeeded.\");\n\t\t\t\t\tresolve();\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis._error(\"Transaction failed. \"+errorAsString(error));\n\t\t\t\t\tthis.rollbackAll()\n\t\t\t\t\t\t.then(()=> {\n\t\t\t\t\t\t\tthis._log(\"Transaction rolled back successfully.\");\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tthis._error(\"Transaction failed to roll back. \"+errorAsString(error));\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t});\n\t}\n\n\t/**\n\t * Runs all transaction items in serial, chaining values from one call to the next\n\t */\n\trunSerial() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(this.transactionItems.length>0) {\n\t\t\t\tthis._log(\"Transaction executing.\");\n\t\t\t\tPromise.reduce(this.transactionItems, (result, p) => {\n\t\t\t\t\t\treturn p.exec(result).then((newResult) => {\n\t\t\t\t\t\t\treturn newResult;\n\t\t\t\t\t\t});\n\t\t\t\t\t}, null)\n\t\t\t\t\t.then((finalResult) => {\n\t\t\t\t\t\tthis._log(\"Transaction execution succeeded.\");\n\t\t\t\t\t\tresolve(finalResult);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tthis._log(\"Transaction failed. \"+errorAsString(error));\n\t\t\t\t\t\tthis.rollbackAll()\n\t\t\t\t\t\t\t.then(()=> {\n\t\t\t\t\t\t\t\tthis._log(\"Transaction rolled back successfully.\");\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\tthis._error(\"Transaction failed to roll back. \"+errorAsString(error));\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t}\n\t\t});\n\t}\n\n\n}\n\nfunction errorAsString(error) {\n\treturn error ? error.toString() : \"\";\n}\n\nexport {\n\tTransaction,\n\tTransactionItem\n}\n"]}